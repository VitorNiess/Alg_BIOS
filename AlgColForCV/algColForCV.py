# -*- coding: utf-8 -*-
"""AlgColForCV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zl8RtQXnY5Tty9IqWY-lWONBzK6YYszo
"""

import numpy as np
import random
import matplotlib.pyplot as plt

# Carrega a matriz de distâncias a partir de um arquivo txt
def carregar_matriz_distancias(filename):
    return np.loadtxt(filename, dtype=int)

# Inicializa a matriz de feromônio
def inicializar_feromonio(num_cidades):
    return np.full((num_cidades, num_cidades), 1e-16)

# Calcula a probabilidade de escolha do próximo caminho
def calcular_probabilidade(cidade_atual, feromonio, distancias, cidades_nao_visitadas, alfa, beta):
    feromonio_atual = feromonio[cidade_atual][cidades_nao_visitadas] ** alfa

    visibilidade = (1.0 / distancias[cidade_atual][cidades_nao_visitadas]) ** beta

    probabilidades = feromonio_atual * visibilidade

    return probabilidades / np.sum(probabilidades)

# Constrói uma solução (caminho) para uma formiga
def construir_caminho(feromonio, distancias, num_cidades, alfa, beta):
    caminho = []

    cidades_nao_visitadas = list(range(num_cidades))
    cidade_atual = random.choice(cidades_nao_visitadas)
    caminho.append(cidade_atual)
    cidades_nao_visitadas.remove(cidade_atual)

    while cidades_nao_visitadas:
        probabilidades = calcular_probabilidade(cidade_atual, feromonio, distancias, cidades_nao_visitadas, alfa, beta)
        cidade_atual = random.choices(cidades_nao_visitadas, weights=probabilidades, k=1)[0]
        caminho.append(cidade_atual)
        cidades_nao_visitadas.remove(cidade_atual)

    return caminho

# Calcula a distância total de um caminho
def calcular_distancia_total(caminho, distancias):
    return sum(distancias[caminho[i-1], caminho[i]] for i in range(len(caminho)))

# Atualiza a matriz de feromônio
def atualizar_feromonio(feromonio, caminhos, distancias, taxa_evaporacao, Q):
    num_cidades = len(caminhos[0])
    delta_feromonio = np.zeros_like(feromonio)

    for caminho in caminhos:
        distancia_total = calcular_distancia_total(caminho, distancias)

        for i in range(num_cidades):
            cidade_de = caminho[i - 1]
            cidade_para = caminho[i]
            delta_feromonio[cidade_de, cidade_para] += Q / distancia_total

    feromonio = (1 - taxa_evaporacao) * feromonio + delta_feromonio
    return feromonio

# Função principal
def ACO(distancias, num_formigas, max_it, alfa, beta, taxa_evaporacao, Q):
    num_cidades = len(distancias)
    feromonio = inicializar_feromonio(num_cidades)

    melhor_caminho = None
    menor_distancia = float('inf')
    melhores_distancias = []

    for it in range(max_it):
        caminhos = []
        distancias_caminhos = []

        for _ in range(num_formigas):
            caminho = construir_caminho(feromonio, distancias, num_cidades, alfa, beta)
            distancia_caminho = calcular_distancia_total(caminho, distancias)

            caminhos.append(caminho)
            distancias_caminhos.append(distancia_caminho)

            if distancia_caminho < menor_distancia:
                menor_distancia = distancia_caminho
                melhor_caminho = caminho

        feromonio = atualizar_feromonio(feromonio, caminhos, distancias, taxa_evaporacao, Q)
        melhores_distancias.append(menor_distancia)

        print(f'Iteração {it+1}/{max_it}, Melhor distância: {menor_distancia}')

    return melhor_caminho, menor_distancia, melhores_distancias

# Plota o gráfico da evolução das melhores distâncias
def plotar_evolucao(melhores_distancias):
    plt.plot(melhores_distancias)
    plt.xlabel('Iterações')
    plt.ylabel('Melhor Distância Encontrada')
    plt.title('Evolução da Melhor Distância')
    plt.show()

filename = 'sgb128_dist.txt'

distancias = carregar_matriz_distancias(filename)
num_cidades = len(distancias)
num_formigas = num_cidades

max_it = 150
alfa = 1 # Influência do feromônio
beta = 5 # Influência do custo do caminho
taxa_evaporacao = 0.5
Q = 100

melhor_caminho, menor_distancia, melhores_distancias = ACO(distancias, num_formigas, max_it, alfa, beta, taxa_evaporacao, Q)
print(f'\nMelhor caminho encontrado: {melhor_caminho} com distância: {menor_distancia}\n')

# Plotando o gráfico
plotar_evolucao(melhores_distancias)